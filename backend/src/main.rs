mod api;
mod config;
mod models;
mod proxy;
mod websocket;
mod database;
mod subscription; // –î–æ–±–∞–≤–∏—Ç—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É

use actix_web::{web, App, HttpServer, middleware::Logger};
use actix_cors::Cors;
use std::sync::Arc;
use tokio::sync::RwLock; // –ò–∑–º–µ–Ω–µ–Ω–æ —Å Mutex –Ω–∞ RwLock
use crate::models::AppState;
use crate::database::Database;
use anyhow::Result;

#[actix_web::main]
async fn main() -> Result<()> {
    env_logger::init();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    let database = Database::new("sqlite:data/stealthcat.db").await?;
    let db = Arc::new(database);
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    let app_state = Arc::new(RwLock::new(AppState::new())); // –ò–∑–º–µ–Ω–µ–Ω–æ —Å Mutex –Ω–∞ RwLock
    
    log::info!("üê± Starting StealthCat backend server...");
    
    // –ó–∞–ø—É—Å–∫ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
    let proxy_engine = proxy::ProxyEngine::new();
    let proxy_addr = "127.0.0.1:8081".parse().unwrap();
    
    tokio::spawn(async move {
        if let Err(e) = proxy_engine.start_proxy_server(proxy_addr).await {
            log::error!("Proxy server error: {}", e);
        }
    });
    
    // –ó–∞–ø—É—Å–∫ HTTP API —Å–µ—Ä–≤–µ—Ä–∞
    HttpServer::new(move || {
        let cors = Cors::default()
            .allow_any_origin()
            .allow_any_method()
            .allow_any_header();
            
        App::new()
            .app_data(web::Data::new(app_state.clone()))
            .app_data(web::Data::new(db.clone()))
            .wrap(cors)
            .wrap(Logger::default())
            .service(
                web::scope("/api")
                    .route("/status", web::get().to(api::get_status))
                    .route("/stats", web::get().to(api::get_stats))
                    .route("/servers", web::get().to(api::get_servers))
                    .route("/config", web::get().to(api::get_config))
                    .route("/config", web::post().to(api::update_config))
                    .route("/logs", web::get().to(api::get_logs))
                    .route("/rules", web::get().to(api::get_rules))
                    .route("/rules", web::post().to(api::create_rule))
                    .route("/rules/{id}", web::put().to(api::update_rule))
                    .route("/rules/{id}", web::delete().to(api::delete_rule))
                    // –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —Å–µ—Ä–≤–µ—Ä–æ–≤
                    .route("/servers", web::post().to(api::create_server))
                    .route("/servers/{id}", web::put().to(api::update_server))
                    .route("/servers/{id}", web::delete().to(api::delete_server))
                    // –ù–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫
                    .route("/subscriptions", web::get().to(api::get_subscriptions))
                    .route("/subscriptions", web::post().to(api::create_subscription))
                    .route("/subscriptions/{id}", web::get().to(api::get_subscription))
                    .route("/subscriptions/{id}", web::put().to(api::update_subscription))
                    .route("/subscriptions/{id}", web::delete().to(api::delete_subscription))
                    .route("/subscriptions/{id}/update", web::post().to(api::update_subscription_servers))
                    // ‚úÖ –î–û–ë–ê–í–ò–¢–¨ –≠–¢–ò –ú–ê–†–®–†–£–¢–´:
                    .route("/servers-v2", web::get().to(api::get_servers_v2))
                    .route("/servers-v2", web::post().to(api::create_server))     // ‚Üê –ò–°–ü–†–ê–í–ò–¢–¨: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å create_server
                    .route("/servers-v2/{id}", web::put().to(api::update_server))    // ‚Üê –î–û–ë–ê–í–ò–¢–¨
                    .route("/servers-v2/{id}", web::delete().to(api::delete_server)) // ‚Üê –î–û–ë–ê–í–ò–¢–¨
                    .route("/servers-v2/{id}/test", web::post().to(api::test_server_speed))
                    .route("/select-server", web::post().to(api::select_server))
            )
            .route("/ws", web::get().to(websocket::websocket_handler))
    })
    .bind("127.0.0.1:8080")?
    .run()
    .await?;
    
    Ok(())
}